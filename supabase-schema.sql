-- Create profiles table
create table if not exists profiles (
  id uuid references auth.users(id) on delete cascade primary key,
  username text not null,
  biography text default '',
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now()
);

-- Create posts table
create table if not exists posts (
  id bigint generated by default as identity primary key,
  title text not null,
  content text,
  image_url text,
  upvotes int not null default 0,
  author_id uuid not null references auth.users(id) on delete cascade,
  created_at timestamptz not null default now(),
  updated_at timestamptz not null default now()
);

-- Create comments table
create table if not exists comments (
  id bigint generated by default as identity primary key,
  post_id bigint not null references posts(id) on delete cascade,
  text text not null,
  author_id uuid not null references auth.users(id) on delete cascade,
  created_at timestamptz not null default now()
);

-- Create upvotes table to track user upvotes
create table if not exists upvotes (
  id bigint generated by default as identity primary key,
  post_id bigint not null references posts(id) on delete cascade,
  user_id uuid not null references auth.users(id) on delete cascade,
  created_at timestamptz not null default now(),
  unique(post_id, user_id) -- Ensure one upvote per user per post
);

-- Enable RLS
alter table profiles enable row level security;
alter table posts enable row level security;
alter table comments enable row level security;
alter table upvotes enable row level security;

-- Drop existing policies if they exist
drop policy if exists "profiles_read" on profiles;
drop policy if exists "profiles_insert_own" on profiles;
drop policy if exists "profiles_update_own" on profiles;

drop policy if exists "posts_read" on posts;
drop policy if exists "posts_insert_own" on posts;
drop policy if exists "posts_update_own" on posts;
drop policy if exists "posts_delete_own" on posts;

drop policy if exists "comments_read" on comments;
drop policy if exists "comments_insert_own" on comments;
drop policy if exists "comments_delete_own" on comments;

drop policy if exists "upvotes_read" on upvotes;
drop policy if exists "upvotes_insert_own" on upvotes;
drop policy if exists "upvotes_delete_own" on upvotes;

-- Profiles policies
create policy "profiles_read" on profiles for select using (true);
create policy "profiles_insert_own" on profiles for insert with check (auth.uid() = id);
create policy "profiles_update_own" on profiles for update using (auth.uid() = id);

-- Posts policies
create policy "posts_read" on posts for select using (true);
create policy "posts_insert_own" on posts for insert with check (auth.uid() = author_id);
create policy "posts_update_own" on posts for update using (auth.uid() = author_id);
create policy "posts_delete_own" on posts for delete using (auth.uid() = author_id);

-- Comments policies
create policy "comments_read" on comments for select using (true);
create policy "comments_insert_own" on comments for insert with check (auth.uid() = author_id);
create policy "comments_delete_own" on comments for delete using (auth.uid() = author_id);

-- Upvotes policies
create policy "upvotes_read" on upvotes for select using (true);
create policy "upvotes_insert_own" on upvotes for insert with check (auth.uid() = user_id);
create policy "upvotes_delete_own" on upvotes for delete using (auth.uid() = user_id);

-- Drop existing function if it exists
drop function if exists increment_upvotes(bigint);

-- Upvote function - now handles one upvote per user
create or replace function toggle_upvote(post_id bigint, user_id uuid)
returns json
language plpgsql
security definer
as $$
declare
  upvote_exists boolean;
  new_upvote_count int;
begin
  -- Check if user has already upvoted this post
  select exists(
    select 1 from upvotes 
    where upvotes.post_id = toggle_upvote.post_id 
    and upvotes.user_id = toggle_upvote.user_id
  ) into upvote_exists;
  
  if upvote_exists then
    -- Remove upvote
    delete from upvotes 
    where upvotes.post_id = toggle_upvote.post_id 
    and upvotes.user_id = toggle_upvote.user_id;
    
    -- Decrease upvote count
    update posts 
    set upvotes = upvotes - 1 
    where id = toggle_upvote.post_id;
  else
    -- Add upvote
    insert into upvotes (post_id, user_id) 
    values (toggle_upvote.post_id, toggle_upvote.user_id);
    
    -- Increase upvote count
    update posts 
    set upvotes = upvotes + 1 
    where id = toggle_upvote.post_id;
  end if;
  
  -- Get updated upvote count
  select upvotes into new_upvote_count from posts where id = toggle_upvote.post_id;
  
  return json_build_object(
    'upvotes', new_upvote_count,
    'has_upvoted', not upvote_exists
  );
end;
$$;

-- Drop existing trigger and function if they exist
drop trigger if exists on_auth_user_created on auth.users;
drop function if exists public.handle_new_user();

-- Function to automatically create profile on user signup
create or replace function public.handle_new_user()
returns trigger
language plpgsql
security definer set search_path = public
as $$
begin
  insert into public.profiles (id, username)
  values (new.id, split_part(new.email, '@', 1));
  return new;
end;
$$;

-- Trigger to create profile on user signup
create trigger on_auth_user_created
  after insert on auth.users
  for each row execute procedure public.handle_new_user();
